<?xml version="1.0" encoding="UTF-8"?>
<record_update table="sp_rel_widget_clone">
    <sp_rel_widget_clone action="INSERT_OR_UPDATE">
        <child display_value="EOB Typeahead Search">c01d21a2dbf01b00a4d9f9c41d9619c1</child>
        <cloned>2018-03-15 07:33:23</cloned>
        <last_validated>2018-03-15 07:33:23</last_validated>
        <parent display_value="Typeahead Search">fa20ec02cb31020000f8d856634c9ce9</parent>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;sp_widget&gt;&lt;category&gt;standard&lt;/category&gt;&lt;client_script&gt;&lt;![CDATA[function ($filter, $location,spAriaUtil, $window) {
	var c = this;
	c.options.glyph = c.options.glyph || 'search';
	c.options.title = c.options.title || c.data.searchMsg;
	c.options.color = c.options.color || "default";

	c.onSelect = function($item, $model, $label) {
		if ($item.target)
			window.open($item.url, $item.target);
		else
			$location.url($item.url);
	};

	c.getResults = function(query) {
		return c.server.get({q: query}).then(function(response) {
			var a = $filter('orderBy')(response.data.results, '-score');
			var resultCount = $filter('limitTo')(a, c.data.limit).length;
				spAriaUtil.sendLiveMessage(parseInt(resultCount) + " " + 
																	 c.data.resultMsg + " " +
																	 c.data.navigationMsg + 
																	 getNavigationKeys());
			return $filter('limitTo')(a, c.data.limit);
		});
	}

	c.submitSearch = function() {
		if (c.searchTerm)
			$location.search({
				id: 'search',
				t: c.data.searchType,
				q: c.searchTerm
			});
	}
	
	function getNavigationKeys() {
		if($window.navigator.userAgent.indexOf("Mac OS X") &gt; -1) 
			return 'âŒ˜';
		return 'Control';
	}
}]]&gt;&lt;/client_script&gt;&lt;controller_as&gt;c&lt;/controller_as&gt;&lt;css&gt;ul.dropdown-menu {
    min-width: 100%;
    border-radius: 0px 0px 4px 4px;
    margin:0px;
}

ul.dropdown-menu a.ta-item {
	line-height: 20px;
}

ul.dropdown-menu i.ta-icon, i.ta-img {
    width: 20px;
    height: 20px;
    background-size: contain;
    display: inline-block;
    background-repeat: no-repeat;
    background-position: center center;
    text-align: center;
    line-height: 20px;
    float:left;
    margin-right: 8px;
}

input[name="q"] {
color: black;
}&lt;/css&gt;&lt;data_table&gt;sp_instance&lt;/data_table&gt;&lt;demo_data/&gt;&lt;description/&gt;&lt;docs/&gt;&lt;field_list/&gt;&lt;has_preview&gt;false&lt;/has_preview&gt;&lt;id&gt;typeahead-search&lt;/id&gt;&lt;internal&gt;false&lt;/internal&gt;&lt;link&gt;&lt;![CDATA[function(scope) {
	var lazyLoader = $injector.get("lazyLoader");
	lazyLoader.putTemplates(scope.data.typeaheadTemplates);
}]]&gt;&lt;/link&gt;&lt;name&gt;Typeahead Search&lt;/name&gt;&lt;option_schema&gt;[{"name":"title","section":"Presentation","label":"Title","type":"string"},{"name":"color","section":"Presentation","label":"Color","type":"string"},{"name":"glyph","section":"Presentation","label":"glyph","type":"string"},{"name":"size","section":"Presentation","label":"Size","type":"string"},{"hint":"Number of typeahead search results returned (default 15)","name":"limit","section":"Behavior","label":"Limit","type":"integer"},{"displayValue":"Search Source","hint":"If provided, limit the scope of the typeahead search to the given search sources","name":"contextual_search_sources","display_value_list":[],"section":"Behavior","label":"Contextual Search Sources","type":"glide_list","value":"sp_search_source","ed":{"reference":"sp_search_source"}}]&lt;/option_schema&gt;&lt;public&gt;true&lt;/public&gt;&lt;roles/&gt;&lt;script&gt;&lt;![CDATA[(function() {
	data.resultMsg = gs.getMessage("Search results");
	data.navigationMsg = gs.getMessage("To navigate, use up and down arrow keys while holding ");
	if (!options.contextual_search_sources)
		data.searchType = $sp.getParameter("t");
	else {
		var contextualSearchSources = options.contextual_search_sources.split(",");
		if (contextualSearchSources.length == 1) {
			var searchSourceGR = new GlideRecord("sp_search_source");
			if (searchSourceGR.get(contextualSearchSources[0]))
				data.searchType = searchSourceGR.getValue("id");
		} else
			data.searchType = $sp.getParameter("t");
	}

	data.results = [];
	data.searchMsg = gs.getMessage("Search");
	data.limit = options.limit || 15;
	var textQuery = '123TEXTQUERY321';

	if (!input) {
		data.typeaheadTemplates = {};

		var searchGroupTemplatesGR = new GlideRecord("sp_search_source");
		searchGroupTemplatesGR.query();
		while(searchGroupTemplatesGR.next()) {
			if (searchGroupTemplatesGR.advanced_typeahead_config)
				data.typeaheadTemplates["sp-typeahead-" + searchGroupTemplatesGR.getValue("id") + ".html"] = $sp.translateTemplate(searchGroupTemplatesGR.getValue("typeahead_template"));
		}

		return;
	}

	data.q = input.q;

	//Gotta decide if we want to use the portal's sources, or use the defaults declared by
	//the sys property
	var useDefaultPortals;
	if (!$sp.getPortalRecord()) {
		useDefaultPortals = true;
	} else {
		var searchSourcesForPortalGR = new GlideRecord("m2m_sp_portal_search_source");
		searchSourcesForPortalGR.addQuery("sp_portal", $sp.getPortalRecord().getUniqueValue());
		searchSourcesForPortalGR.query();
		useDefaultPortals = searchSourcesForPortalGR.getRowCount() == 0;
	}

	if (options.contextual_search_sources) {
		var contextualSearchSourceGR = new GlideRecord("sp_search_source");
		contextualSearchSourceGR.addQuery("sys_id", "IN", options.contextual_search_sources);
		contextualSearchSourceGR.query();
		while (contextualSearchSourceGR.next()) {
			data.searchType = contextualSearchSourceGR.getValue("id");
			getResults(contextualSearchSourceGR);
		}
	} else if (useDefaultPortals) {
		var defaultSearchSourceGR = new GlideRecord("sp_search_source");
		var defaultSearchSourceIDList = gs.getProperty("glide.service_portal.default_search_sources", "");
		defaultSearchSourceGR.addQuery("sys_id", "IN", defaultSearchSourceIDList);
		defaultSearchSourceGR.addQuery("enable_typeahead", true);
		defaultSearchSourceGR.query();
		while(defaultSearchSourceGR.next()) {
			getResults(defaultSearchSourceGR);
		}
	} else {
		var m2mSearchSourceGR = new GlideRecord("m2m_sp_portal_search_source");
		m2mSearchSourceGR.addQuery("sp_search_source.enable_typeahead", true);
		m2mSearchSourceGR.addQuery("sp_portal", $sp.getPortalRecord().getUniqueValue());
		m2mSearchSourceGR.query();
		while(m2mSearchSourceGR.next()) {
			getResults(m2mSearchSourceGR.getElement("sp_search_source").getRefRecord());
		}
	}

	function getResults(gr) {
		//Check if the user is allowed to see this source.
		var userCriteria = new GlideSPUserCriteria();
		if (userCriteria.isEnabled()) {
			if (!userCriteria.userCanSeeSearchSource(gr.getUniqueValue()))
				return;
		} else {
			var gs = GlideSession.get();
			var searchSourceRoles = gr.getValue("roles");
			if (searchSourceRoles &amp;&amp; !gs.hasRole(searchSourceRoles))
				return;
		}

		if (gr.is_scripted_source) {
			var input = {};
			input.query = data.q;
			var evaluator = new GlideScopedEvaluator();
			var results = evaluator.evaluateScript(gr, "data_fetch_script", input);

			results.forEach(function(item) {
				if (gr.advanced_typeahead_config)
					item.templateID = "sp-typeahead-" + gr.getValue("id") + ".html";
				else {
					item.glyph = gr.getValue("typeahead_glyph");
					item.linkToPage = gr.getValue("page");
				}
				data.results.push(item);
			});
		} else {
			var primaryField = gr.getValue("primary_display_field");
			var displayFields = gr.getValue("display_fields");

			var resultGR = new GlideRecordSecure(gr.getValue("source_table"));
			var condition = gr.getValue("condition");
			if (condition)
				resultGR.addEncodedQuery(condition);
			if (data.q)
				resultGR.addQuery('123TEXTQUERY321', data.q);
			resultGR.query();

			var searchTableCount = 0;
			while (resultGR.next() &amp;&amp; searchTableCount &lt; data.limit) {
				if (!resultGR.canRead())
					continue;

				var secondaryValues = {};

				if (displayFields)
					displayFields.split(",").forEach(function(field) {
						var obj = getField(resultGR, field);
						secondaryValues[field] = obj;
					});

				var item = {
					primary: (primaryField) ? resultGR.getValue(primaryField) : resultGR.getDisplayValue(),
					sys_id: resultGR.getUniqueValue(),
					table: resultGR.getTableName(),
					fields: secondaryValues
				};

				if (gr.advanced_typeahead_config)
					item.templateID = "sp-typeahead-" + gr.getValue("id") + ".html";
				else {
					item.glyph = gr.getValue("typeahead_glyph");
					item.linkToPage = gr.getValue("page");
				}

				data.results.push(item);
				searchTableCount++;
			}
		}

		var pageGR = new GlideRecord("sp_page");
		if (pageGR.get(gr.getValue("page")))
			var pageID = pageGR.getValue("id");

		data.results.forEach(function(result) {
			if (result.url)
				return;

			if (pageID) {
				result.url = "?id=" + pageID;
				if (result.sys_id)
					result.url += "&amp;sys_id=" + result.sys_id;
				if (result.table)
					result.url += "&amp;table=" + result.table
			} else {
				result.url = "";
			}
		});
	}
	
	gs.flushMessages();
	
	function getField(gr, name) {
		var f = {};
		f.display_value = gr.getDisplayValue(name);
		f.value = gr.getValue(name);
		var ge = gr.getElement(name);
		if (ge == null)
			return f;

		f.type = ge.getED().getInternalType()
		f.label = ge.getLabel();
		return f;
	}
	
})();]]&gt;&lt;/script&gt;&lt;servicenow&gt;true&lt;/servicenow&gt;&lt;sys_class_name&gt;sp_widget&lt;/sys_class_name&gt;&lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2015-08-12 00:47:31&lt;/sys_created_on&gt;&lt;sys_customer_update&gt;false&lt;/sys_customer_update&gt;&lt;sys_id&gt;fa20ec02cb31020000f8d856634c9ce9&lt;/sys_id&gt;&lt;sys_mod_count&gt;358&lt;/sys_mod_count&gt;&lt;sys_name&gt;Typeahead Search&lt;/sys_name&gt;&lt;sys_package display_value="Service Portal - Core" source="com.glide.service-portal"&gt;fad771a5dba5fe408838f5e51d961912&lt;/sys_package&gt;&lt;sys_policy/&gt;&lt;sys_replace_on_upgrade&gt;false&lt;/sys_replace_on_upgrade&gt;&lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;&lt;sys_update_name&gt;sp_widget_fa20ec02cb31020000f8d856634c9ce9&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2017-09-18 21:24:15&lt;/sys_updated_on&gt;&lt;template&gt;&lt;![CDATA[&lt;form ng-submit="c.submitSearch()"&gt;
  &lt;input type="hidden" name="id" value="search"/&gt;
  &lt;input type="hidden" name="t" value="{{data.searchType}}"/&gt;
  &lt;div class="input-group input-group-{{::c.options.size}}"&gt;
    &lt;!-- uses ui.bootstrap.typeahead --&gt;
    &lt;input name="q" type="text" placeholder="{{::c.options.title}}" ng-model="c.searchTerm"
           autocomplete="off"
           uib-typeahead="item as item.primary for item in c.getResults($viewValue)"
           typeahead-wait-ms="250"
           typeahead-focus-first="false"
           typeahead-on-select="c.onSelect($item, $model, $label)"
           typeahead-template-url="sp-typeahead.html"
           typeahead-popup-template-url="sp-typeahead-popup.html"
           class="form-control input-typeahead"
           title="{{::c.options.title}}"
           role="textbox"
           aria-label="{{::c.options.title}}" tabindex="0" aria-haspopup="true"&gt;
    &lt;span class="input-group-btn"&gt;
      &lt;button name="search" type="submit" class="btn btn-{{::c.options.color}}"
              title="{{::c.options.title}}"
              aria-label="{{::c.options.title}}"&gt;
    	&lt;i ng-if="::c.options.glyph" class="fa fa-{{::c.options.glyph}}"&gt;&lt;/i&gt;
      &lt;/button&gt;
    &lt;/span&gt;
  &lt;/div&gt;
&lt;/form&gt;]]&gt;&lt;/template&gt;&lt;/sp_widget&gt;</payload>
        <sys_class_name>sp_rel_widget_clone</sys_class_name>
        <sys_created_by>rudolf.cronje</sys_created_by>
        <sys_created_on>2018-03-15 07:33:23</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>c01d2da2dbf01b00a4d9f9c41d961916</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>c01d21a2dbf01b00a4d9f9c41d9619c1</sys_name>
        <sys_package display_value="Electronic Occurence Book" source="engen_eob">f395119e0f230300c23945ace1050e6c</sys_package>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Electronic Occurence Book">f395119e0f230300c23945ace1050e6c</sys_scope>
        <sys_update_name>sp_rel_widget_clone_c01d2da2dbf01b00a4d9f9c41d961916</sys_update_name>
        <sys_updated_by>rudolf.cronje</sys_updated_by>
        <sys_updated_on>2018-03-15 07:33:23</sys_updated_on>
    </sp_rel_widget_clone>
</record_update>
