<?xml version="1.0" encoding="UTF-8"?>
<record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category>custom</category>
        <client_script><![CDATA[function ($scope, $location, $rootScope, spUtil, $interpolate) {
	var c = this;
	
	this.data.filterText = "";
	this.data.prevQuery = "";
	this.showFilter = true;

	this.onClick = function($event, item, url, action) {
		$event.stopPropagation();
		$event.preventDefault();
		if (typeof url == "string") {
			var urlExp = $interpolate(url);
			url = urlExp(item);
			$location.url(url);
		} else if (url && typeof url == "object") {
			$location.search(url);
		}
		else {
			var evt = {};
			evt.url = url;
			evt.table = c.options.table;
			evt.sys_id = item.sys_id;
			evt.record = item;
			evt.rectangle_id = c.options.sys_id;
			evt.action = action;
			// put out the selection with simple list "sl_" prefix
			$location.search('sl_sys_id', evt.sys_id);
			$location.search('sl_table', evt.table);
			$location.search('spa', 1); // spa means "I've got this"
			$rootScope.$broadcast('$sp.list.click', evt);
		}
	};
		
	if (c.options.table)
		spUtil.recordWatch($scope, c.options.table, c.options.filter);

	this.getMaxShownLabel = function(maxEntries, totalCount) {
		
		if (this.data.reccount < this.data.endsegment) {
			return "${Page [0] of [1] (Records [2] to [3])}".replace('[0]', this.data.page).replace('[1]', Math.ceil(this.data.maxPageCount)).replace('[2]', (this.data.startsegment + 1)).replace('[3]', this.data.reccount);
		}
		return "${Page [0] of [1] (Records [2] to [3] of [4])}".replace('[0]', this.data.page).replace('[1]', Math.ceil(this.data.maxPageCount)).replace('[2]', (this.data.startsegment + 1)).replace('[3]', this.data.endsegment).replace('[4]', this.data.reccount);
		
	};
	
	this.seeAll = function(){
		$location.search({
			id: c.options.list_page_dv || 'list',
			table: c.options.table,
			filter: c.options.filter
		});
	};

	this.seeNext = function(){
		//alert (this.data.page);
		//alert (this.data.maxPageCount);
		if (this.data.page < this.data.maxPageCount) {
			this.data.startsegment = this.data.startsegment + c.options.maximum_entries;
			this.data.endsegment = this.data.endsegment + c.options.maximum_entries;
			this.data.page = this.data.page + 1;
			c.server.update();
		}
	}
	
	this.seePrevious = function(){
		if (this.data.page > 1){
			this.data.startsegment = this.data.startsegment - c.options.maximum_entries;
			this.data.endsegment = this.data.endsegment - c.options.maximum_entries;
			this.data.page = this.data.page - 1;
			c.server.update();
		}
		
	}
	
	
	c.getActionColor = function(action) {
		return "text-" + action.color;
	};
	
	c.update = function update() {
			c.server.update();	
	}
	
	c.toggleFilter = function() {		
		c.showFilter = !c.showFilter;		
	}
		
}]]></client_script>
        <controller_as>c</controller_as>
        <css>.panel {&#13;
position: relative;&#13;
}&#13;
&#13;
.panel-heading i {&#13;
  cursor: pointer;&#13;
  position: absolute;&#13;
  padding: 10px;&#13;
  top: 0px;&#13;
  right: 0px;  &#13;
  cursor: pointer;&#13;
}&#13;
&#13;
.disabled-filter {&#13;
	color: #A0A0A0;&#13;
}&#13;
&#13;
.list-group-item.ng-enter {&#13;
  transition: all 1s;&#13;
  -webkit-transition: all 1s;&#13;
&#13;
  background-color: #c0dcfa;&#13;
}&#13;
&#13;
.list-group-item.ng-enter-active {&#13;
  background-color: #fff;&#13;
}&#13;
&#13;
.hide-x-overflow {&#13;
  overflow-x: hidden;&#13;
}&#13;
&#13;
.translated-html &gt; p {&#13;
  margin: 0px;&#13;
  padding: 0px;&#13;
}&#13;
&#13;
IMG {&#13;
  max-width: 320px;&#13;
  max-height: 240px;&#13;
}&#13;
&#13;
IMG.img-sm {&#13;
  max-height: 40px;&#13;
  max-width: 40px;&#13;
}&#13;
&#13;
.filter-box {&#13;
  margin-top: 10px;&#13;
}&#13;
&#13;
.switch {&#13;
  position: relative;&#13;
  display: inline-block;&#13;
  width: 60px;&#13;
  height: 34px;&#13;
}&#13;
&#13;
/* Hide default HTML checkbox */&#13;
.switch input {display:none;}&#13;
&#13;
/* The slider */&#13;
.slider {&#13;
  position: absolute;&#13;
  cursor: pointer;&#13;
  top: 0;&#13;
  left: 0;&#13;
  right: 0;&#13;
  bottom: 0;&#13;
  background-color: #ccc;&#13;
  -webkit-transition: .4s;&#13;
  transition: .4s;&#13;
}&#13;
&#13;
.slider:before {&#13;
  position: absolute;&#13;
  content: "";&#13;
  height: 26px;&#13;
  width: 26px;&#13;
  left: 4px;&#13;
  bottom: 4px;&#13;
  background-color: white;&#13;
  -webkit-transition: .4s;&#13;
  transition: .4s;&#13;
}&#13;
&#13;
input:checked + .slider {&#13;
  background-color: #2196F3;&#13;
}&#13;
&#13;
input:focus + .slider {&#13;
  box-shadow: 0 0 1px #2196F3;&#13;
}&#13;
&#13;
input:checked + .slider:before {&#13;
  -webkit-transform: translateX(26px);&#13;
  -ms-transform: translateX(26px);&#13;
  transform: translateX(26px);&#13;
}&#13;
&#13;
/* Rounded sliders */&#13;
.slider.round {&#13;
  border-radius: 34px;&#13;
}&#13;
&#13;
.slider.round:before {&#13;
  border-radius: 50%;&#13;
}</css>
        <data_table>sp_instance_vlist</data_table>
        <demo_data/>
        <description/>
        <docs/>
        <field_list>table,display_field,glyph,filter,sp_page,color,size</field_list>
        <has_preview>false</has_preview>
        <id>eob-simple-list</id>
        <internal>false</internal>
        <link/>
        <name>EOB Simple List</name>
        <option_schema>[{"name":"always_show","label":"Show even when empty","type":"boolean"},{"name":"panel_body_height","label":"List body height","type":"string"},{"name":"image_field","label":"Image field","type":"field_name"},{"name":"secondary_fields","label":"Secondary fields","type":"field_list"},{"name":"rounded_images","label":"Rounded images","type":"boolean"},{"displayValue":"Page","name":"list_page","label":"List page","type":"reference","value":"sp_page","ed":{"reference":"sp_page"}},{"name":"hide_footer","label":"Hide Footer","type":"boolean"},{"displayValue":"UI View","hint":"View to use when target page is a form","name":"view","label":"View","type":"reference","value":"sys_ui_view","ed":{"reference":"sys_ui_view"}}]</option_schema>
        <public>true</public>
        <roles/>
        <script><![CDATA[(function () {
	data.filterMsg = gs.getMessage("Filter...");
	
	options.show_footer = gs.nil(options.show_footer) ?  true : options.show_footer;
	options.table = $sp.getParameter('t') || options.table;
	if (!options.table)
		return;

	var gr = new GlideRecordSecure(options.table); // does ACL checking for us
	if(!gr.isValid()) {
		data.isValid = false;
		return;
	} else
		data.isValid = true;
	gr.addEncodedQuery(options.filter);
	options.title = options.title || gr.getPlural();
	options.display_field = $sp.getParameter('f') || options.display_field;
	if (!options.display_field || !gr.isValidField(options.display_field))
		options.display_field = gr.getDisplayName();

	if (!input) {
		data.startsegment = 0;
		data.endsegment = options.maximum_entries;	
		data.page = 1;
	} else {
		console.log("Start Segment Changed: " + input.startsegment);
		console.log("End Segment Changed: " + input.endsegment);
		data.startsegment = input.startsegment;
		data.endsegment = input.endsegment;
		data.page = input.page;
	}
	
	if (input && input.filterText) {
		gr.addEncodedQuery(options.display_field + "LIKE" + input.filterText);
		if (input.prevQuery != input.filterText) {
			console.log("Query Changed from " + input.prevQuery + " to " + input.filterText );
			data.startsegment = 0;
			data.endsegment = options.maximum_entries;	
			data.page = 1;
			data.prevQuery = input.filterText;
		}
	}
	// The following just gets the record count...
	var grcount = new GlideRecordSecure(options.table);
	grcount.addEncodedQuery(options.filter);
	if (input && input.filterText) {
		grcount.addEncodedQuery(options.display_field + "LIKE" + input.filterText);
	}
	grcount.query();
	data.reccount = grcount.getRowCount();
	data.maxPageCount = data.reccount / options.maximum_entries;
	
	console.log("Start Segment: " + data.startsegment);
	console.log("End Segment: " + data.endsegment);
	console.log("Current Page Number: " + data.page);
	console.log("Total Record Count: " + data.reccount);
	console.log("Total Max Pages: " + data.maxPageCount);
	
	options.title = options.title || gr.getPlural();
	options.secondary_fields = options.secondary_fields || "";
	options.secondary_fields = options.secondary_fields.split(",");
	if (!options.order_by || !gr.isValidField(options.order_by))
		options.order_by = options.display_field;

	// Set ID of sp_page from option schema
	if (options.list_page) {
		var sp_page = GlideRecord('sp_page');
		if (sp_page.get(options.list_page))
			options.list_page_dv = sp_page.getDisplayValue('id');
	}
	
	// redo query with limit
	if (options.order_direction == "asc")
		gr.orderBy(options.order_by);
	else
		gr.orderByDesc(options.order_by);

	data.maxCount = 500;
	gr.setLimit(data.maxCount);
	gr.chooseWindow(data.startsegment, data.endsegment);
	gr.query();
	
	data.count = gr.getRowCount();
	data.actions = getActions();
	data.list = [];
	var recordIdx = 0;
	while (gr.next()) {
		if (options.maximum_entries && recordIdx == options.maximum_entries)
			break;

		var record = {};
		if (data.actions.length > 0) {
			var fields = gr.getFields();
			for (var i = 0; i < fields.size(); i++) {
				var glideElement = fields.get(i);
				var name = glideElement.getName();
				if (name.indexOf("sys_") == -1)
					record[name] = gr.getValue(name);
			}
		}

		record.sys_id = gr.getValue('sys_id');
		record.recnumber = gr.getValue('number');
		if (options.image_field) {
			record.image_field = gr.getDisplayValue(options.image_field);
			if (!record.image_field)
				record.image_field = "noimage.pngx";
		}

		if (options.display_field)
			record.display_field = getField(gr, options.display_field);

		record.secondary_fields = [];
		options.secondary_fields.forEach(function(f) {
			
			record.secondary_fields.push(getField(gr, f));
		});

		if (options.sp_page) {
			var view = "sp";
			if (options.view) {
				var viewGR = new GlideRecord("sys_ui_view");
				viewGR.get(options.view);
				view = viewGR.getValue("name");
			}
			record.url = {id: options.sp_page, table: options.table, sys_id: record.sys_id, view: view};
			if (record.recnumber.startsWith("INC")) {
				record.url = {id: options.sp_page, table: 'incident', sys_id: record.sys_id, view: view};
			}
			if (record.recnumber.startsWith("RITM")) {
				record.url = {id: options.sp_page, table: 'sc_req_item', sys_id: record.sys_id, view: view};
			}
			if (record.recnumber.startsWith("FCR") && !record.recnumber.startsWith("FCRT")) {
				record.url = {id: options.sp_page, table: 'facilities_request', sys_id: record.sys_id, view: view};
			}
		} else if (options.url != '')
			record.url = options.url;
		else
			record.url = null;

		data.list.push(record);
		recordIdx++;
	}

	function getField(gr, name) {
		var f = {};
		f.display_value = gr.getDisplayValue(name);
		f.value = gr.getValue(name);
		//console.log ("Value : " + f.display_value);
		var ge = gr.getElement(name);
			if (ge == null)
				return f;

		f.type = ge.getED().getInternalType();
		f.label = ge.getLabel();
		
		return f;
	}

	function getActions() {
		var rl = new GlideRecord("sp_vlist_action");
		rl.addQuery("sp_rectangle_vlist",$sp.getValue("sys_id"));
		rl.query();
		var actions = [];
		while(rl.next()) {
			var action = {};
			$sp.getRecordValues(action, rl, "name,glyph,hint,url,color");
			actions.push(action);
		}
		return actions;
	}
})();]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>rudolf.cronje</sys_created_by>
        <sys_created_on>2018-07-04 10:59:30</sys_created_on>
        <sys_customer_update>true</sys_customer_update>
        <sys_id>11b4ca5adbc313c4a4d9f9c41d961936</sys_id>
        <sys_mod_count>1</sys_mod_count>
        <sys_name>EOB Simple List</sys_name>
        <sys_package display_value="Electronic Occurence Book" source="engen_eob">f395119e0f230300c23945ace1050e6c</sys_package>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Electronic Occurence Book">f395119e0f230300c23945ace1050e6c</sys_scope>
        <sys_update_name>sp_widget_11b4ca5adbc313c4a4d9f9c41d961936</sys_update_name>
        <sys_updated_by>rudolf.cronje</sys_updated_by>
        <sys_updated_on>2018-07-04 11:00:43</sys_updated_on>
        <template><![CDATA[<div class="panel panel-{{::c.options.color}} b" ng-if="c.data.isValid && (c.options.always_show || c.data.filterText || c.data.list.length)">
  <div class="panel-heading" ng-if="::!c.options.hide_header">
    <h4 class="panel-title">      
      <span ng-if="c.options.glyph">
        <fa name="{{::c.options.glyph}}" />
      </span>{{::c.options.title}}</h4>
    <!-- <i class="fa fa-filter" ng-click="c.toggleFilter()" ng-class="{'disabled-filter': !c.showFilter}"></i> -->
    <div ng-show="c.showFilter">
      <input ng-model="c.data.filterText" ng-model-options="{debounce: 300}" sn-focus="c.showFilter" placeholder="{{::data.filterMsg}}" ng-change="c.update()" class="form-control input-sm filter-box">
    </div>
  </div>
  <div class="list-group hide-x-overflow" style="max-height: {{::c.options.panel_body_height || 'none'}}; overflow-y: auto;">
    <div ng-if="c.data.list.length > 0" ng-repeat="item in c.data.list track by item.sys_id" class="list-group-item">
      <a ng-click="c.onClick($event, item, item.url, {})" href="javascript:void(0)" >
        <span ng-repeat="action in c.data.actions" href="" ng-click="c.onClick($event, item, action.url, action)" ng-if="action.glyph"
              class="list-action l-h-40 pull-right">
          <fa name="{{action.glyph}}" ng-class="c.getActionColor(action)" />
        </span>
        <span ng-if="c.options.image_field" class="pull-left m-r"
              ng-class="{'avatar': c.options.rounded_images, 'thumb-sm': c.options.rounded_images}">
          <img ng-src="{{item.image_field}}" alt="..." class="img-sm" ng-class="{'img-circle': c.options.rounded_images}">
        </span>
        <div>
          <div ng-switch on="item.display_field.type" ng-class="{'l-h-40': !item.secondary_fields.length}">
            <span class="translated-html" ng-switch-when="translated_html" ng-bind-html="item.display_field.value"></span>
            <div ng-switch-default>{{item.display_field.display_value}}</div>
          </div>
          <small class="text-muted" ng-repeat="f in item.secondary_fields">
            <span ng-if="!$first"> • </span>
            <span ng-switch="f.type" title="{{::f.label}}">
              <span ng-switch-when="glide_date"><sn-time-ago timestamp="::f.value" /></span>
              <span ng-switch-when="glide_date_time"><sn-time-ago timestamp="::f.value" /></span>
              <span ng-switch-default="">{{f.display_value}}</span>
            </span>
          </small>
        </div>
      </a>
    </div>
     <div ng-if="!c.data.list.length" class="list-group-item">
     ${No records found}
     </div>
  </div>
  <div class="panel-footer">
    <h4 ng-if="c.data.reccount > 0" class="panel-title">{{c.getMaxShownLabel(c.options.maximum_entries, c.data.count)}}
      <div ng-if="c.data.page < c.data.maxPageCount" class="pull-right" href="javascript:void(0)" ng-click="c.seeNext()">&nbsp;&nbsp;Next</div>
      <div ng-if="c.data.page > 1" class="pull-right" href="javascript:void(0)" ng-click="c.seePrevious()">Previous&nbsp;&nbsp;</div>
    </h4>
  </div>]]></template>
    </sp_widget>
</record_update>
